[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\alexe\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\alexe\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Amazon.com Inc. Java 11.0.12)
[debug]       Load.loadUnit: plugins took 95.5065ms
[debug]       Load.loadUnit: defsScala took 0.3029ms
[debug] [Loading] Scanning directory C:\Users\alexe\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\alexe\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 16.7915 ms
[debug]           Load.resolveProject(global-plugins) took 53.9199ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\alexe\.sbt\1.0\plugins, plugins: List(<none>))) took 100.4996ms
[debug] [Loading] Done in C:\Users\alexe\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 122.8021ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2817ms
[debug]     Load.loadUnit(file:/C:/Users/alexe/.sbt/1.0/plugins/, ...) took 228.0173ms
[debug]   Load.apply: load took 424.45ms
[debug]   Load.apply: resolveProjects took 6.3627ms
[debug]   Load.apply: finalTransforms took 60.7832ms
[debug]   Load.apply: config.delegates took 8.4376ms
[debug]   Load.apply: Def.make(settings)... took 390.0278ms
[debug]   Load.apply: structureIndex took 94.6336ms
[debug]   Load.apply: mkStreams took 1.893ms
[info] loading global plugins from C:\Users\alexe\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3165.9164ms
[debug]           Load.loadUnit: plugins took 24.7619ms
[debug]           Load.loadUnit: defsScala took 0.0036ms
[debug] [Loading] Scanning directory C:\Users\alexe\IdeaProjects\SparkSandBox\project
[debug]             Load.loadUnit: mkEval took 7.5953ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\alexe\IdeaProjects\SparkSandBox\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.7533 ms
[info] loading settings for project sparksandbox-build from idea.sbt ...
[debug]               Load.resolveProject(sparksandbox-build) took 2.6527ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sparksandbox-build, base: C:\Users\alexe\IdeaProjects\SparkSandBox\project, plugins: List(<none>))) took 4.8997ms
[debug] [Loading] Done in C:\Users\alexe\IdeaProjects\SparkSandBox\project, returning: (sparksandbox-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 158.4881ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.7966ms
[debug]         Load.loadUnit(file:/C:/Users/alexe/IdeaProjects/SparkSandBox/project/, ...) took 188.0215ms
[debug]       Load.apply: load took 189.4041ms
[debug]       Load.apply: resolveProjects took 0.0986ms
[debug]       Load.apply: finalTransforms took 8.5908ms
[debug]       Load.apply: config.delegates took 0.3914ms
[debug]       Load.apply: Def.make(settings)... took 73.0631ms
[debug]       Load.apply: structureIndex took 29.16ms
[debug]       Load.apply: mkStreams took 0.0025ms
[info] loading project definition from C:\Users\alexe\IdeaProjects\SparkSandBox\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 640.9626ms
[debug]     Load.loadUnit: defsScala took 0.0046ms
[debug] [Loading] Scanning directory C:\Users\alexe\IdeaProjects\SparkSandBox
[debug]       Load.loadUnit: mkEval took 0.2916ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\alexe\IdeaProjects\SparkSandBox, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.3031 ms
[info] loading settings for project sparksandbox from build.sbt ...
[debug]         Load.resolveProject(sparksandbox) took 29.1214ms
[debug]       Load.loadTransitive: finalizeProject(Project(id sparksandbox, base: C:\Users\alexe\IdeaProjects\SparkSandBox, plugins: List(<none>))) took 32.4492ms
[debug] [Loading] Done in C:\Users\alexe\IdeaProjects\SparkSandBox, returning: (sparksandbox)
[debug]     Load.loadUnit: loadedProjectsRaw took 157.8662ms
[debug]     Load.loadUnit: cleanEvalClasses took 5.4195ms
[debug]   Load.loadUnit(file:/C:/Users/alexe/IdeaProjects/SparkSandBox/, ...) took 804.9298ms
[debug] Load.apply: load took 806.5877ms
[debug] Load.apply: resolveProjects took 0.0942ms
[debug] Load.apply: finalTransforms took 37.2706ms
[debug] Load.apply: config.delegates took 0.2998ms
[debug] Load.apply: Def.make(settings)... took 64.7089ms
[debug] Load.apply: structureIndex took 25.3078ms
[debug] Load.apply: mkStreams took 0.0028ms
[info] set current project to SparkSandBox (in build file:/C:/Users/alexe/IdeaProjects/SparkSandBox/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62562 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62562, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SparkSandBox (in build file:/C:/Users/alexe/IdeaProjects/SparkSandBox/)
[debug] > Exec(idea-shell, None, None)
