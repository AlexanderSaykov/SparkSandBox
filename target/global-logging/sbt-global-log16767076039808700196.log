[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\alexe\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\alexe\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Amazon.com Inc. Java 11.0.12)
[debug]       Load.loadUnit: plugins took 149.3787ms
[debug]       Load.loadUnit: defsScala took 0.3407ms
[debug] [Loading] Scanning directory C:\Users\alexe\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\alexe\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 39.0753 ms
[debug]           Load.resolveProject(global-plugins) took 55.6019ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\alexe\.sbt\1.0\plugins, plugins: List(<none>))) took 129.342ms
[debug] [Loading] Done in C:\Users\alexe\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 156.7128ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.264ms
[debug]     Load.loadUnit(file:/C:/Users/alexe/.sbt/1.0/plugins/, ...) took 316.7639ms
[debug]   Load.apply: load took 494.2629ms
[debug]   Load.apply: resolveProjects took 6.2978ms
[debug]   Load.apply: finalTransforms took 57.9076ms
[debug]   Load.apply: config.delegates took 8.6261ms
[debug]   Load.apply: Def.make(settings)... took 354.0326ms
[debug]   Load.apply: structureIndex took 90.7528ms
[debug]   Load.apply: mkStreams took 1.4843ms
[info] loading global plugins from C:\Users\alexe\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2498.252ms
[debug]           Load.loadUnit: plugins took 22.6476ms
[debug]           Load.loadUnit: defsScala took 0.0036ms
[debug] [Loading] Scanning directory C:\Users\alexe\IdeaProjects\SparkSandBox\project
[debug]             Load.loadUnit: mkEval took 7.4035ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\alexe\IdeaProjects\SparkSandBox\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.7362 ms
[info] loading settings for project sparksandbox-build from idea1.sbt ...
[debug]               Load.resolveProject(sparksandbox-build) took 3.1754ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sparksandbox-build, base: C:\Users\alexe\IdeaProjects\SparkSandBox\project, plugins: List(<none>))) took 5.4327ms
[debug] [Loading] Done in C:\Users\alexe\IdeaProjects\SparkSandBox\project, returning: (sparksandbox-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 146.6339ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.0538ms
[debug]         Load.loadUnit(file:/C:/Users/alexe/IdeaProjects/SparkSandBox/project/, ...) took 174.2585ms
[debug]       Load.apply: load took 175.6194ms
[debug]       Load.apply: resolveProjects took 0.1195ms
[debug]       Load.apply: finalTransforms took 8.7449ms
[debug]       Load.apply: config.delegates took 0.3806ms
[debug]       Load.apply: Def.make(settings)... took 75.0597ms
[debug]       Load.apply: structureIndex took 24.2989ms
[debug]       Load.apply: mkStreams took 0.0022ms
[info] loading project definition from C:\Users\alexe\IdeaProjects\SparkSandBox\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 1888.1648ms
[debug]     Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory C:\Users\alexe\IdeaProjects\SparkSandBox
[debug]       Load.loadUnit: mkEval took 0.4095ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\alexe\IdeaProjects\SparkSandBox, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.1709 ms
[info] loading settings for project sparksandbox from build.sbt ...
[debug]         Load.resolveProject(sparksandbox) took 30.2875ms
[debug]       Load.loadTransitive: finalizeProject(Project(id sparksandbox, base: C:\Users\alexe\IdeaProjects\SparkSandBox, plugins: List(<none>))) took 33.5803ms
[debug] [Loading] Done in C:\Users\alexe\IdeaProjects\SparkSandBox, returning: (sparksandbox)
[debug]     Load.loadUnit: loadedProjectsRaw took 3424.5137ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.2793ms
[debug]   Load.loadUnit(file:/C:/Users/alexe/IdeaProjects/SparkSandBox/, ...) took 5323.6164ms
[debug] Load.apply: load took 5325.8227ms
[debug] Load.apply: resolveProjects took 0.1184ms
[debug] Load.apply: finalTransforms took 22.4487ms
[debug] Load.apply: config.delegates took 0.3069ms
[debug] Load.apply: Def.make(settings)... took 74.6723ms
[debug] Load.apply: structureIndex took 26.491ms
[debug] Load.apply: mkStreams took 0.0024ms
[info] set current project to SparkSandBox (in build file:/C:/Users/alexe/IdeaProjects/SparkSandBox/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 55115 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 55115, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SparkSandBox (in build file:/C:/Users/alexe/IdeaProjects/SparkSandBox/)
[debug] > Exec(idea-shell, None, None)
