[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\alexe\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\alexe\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Amazon.com Inc. Java 11.0.12)
[debug]       Load.loadUnit: plugins took 92.7541ms
[debug]       Load.loadUnit: defsScala took 0.3118ms
[debug] [Loading] Scanning directory C:\Users\alexe\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\alexe\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 17.5016 ms
[debug]           Load.resolveProject(global-plugins) took 52.0241ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\alexe\.sbt\1.0\plugins, plugins: List(<none>))) took 98.4344ms
[debug] [Loading] Done in C:\Users\alexe\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 120.5348ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3041ms
[debug]     Load.loadUnit(file:/C:/Users/alexe/.sbt/1.0/plugins/, ...) took 222.3294ms
[debug]   Load.apply: load took 401.5086ms
[debug]   Load.apply: resolveProjects took 6.3229ms
[debug]   Load.apply: finalTransforms took 58.5116ms
[debug]   Load.apply: config.delegates took 7.6191ms
[debug]   Load.apply: Def.make(settings)... took 401.3133ms
[debug]   Load.apply: structureIndex took 93.0915ms
[debug]   Load.apply: mkStreams took 1.5782ms
[info] loading global plugins from C:\Users\alexe\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2871.8409ms
[debug]           Load.loadUnit: plugins took 23.0402ms
[debug]           Load.loadUnit: defsScala took 0.004ms
[debug] [Loading] Scanning directory C:\Users\alexe\IdeaProjects\SparkSandBox\project
[debug]             Load.loadUnit: mkEval took 8.2564ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\alexe\IdeaProjects\SparkSandBox\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.8273 ms
[info] loading settings for project sparksandbox-build from idea.sbt ...
[debug]               Load.resolveProject(sparksandbox-build) took 2.6128ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sparksandbox-build, base: C:\Users\alexe\IdeaProjects\SparkSandBox\project, plugins: List(<none>))) took 4.8842ms
[debug] [Loading] Done in C:\Users\alexe\IdeaProjects\SparkSandBox\project, returning: (sparksandbox-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 154.7237ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.0479ms
[debug]         Load.loadUnit(file:/C:/Users/alexe/IdeaProjects/SparkSandBox/project/, ...) took 182.7862ms
[debug]       Load.apply: load took 184.1147ms
[debug]       Load.apply: resolveProjects took 0.1485ms
[debug]       Load.apply: finalTransforms took 7.8499ms
[debug]       Load.apply: config.delegates took 0.2975ms
[debug]       Load.apply: Def.make(settings)... took 75.8017ms
[debug]       Load.apply: structureIndex took 29.9257ms
[debug]       Load.apply: mkStreams took 0.0023ms
[info] loading project definition from C:\Users\alexe\IdeaProjects\SparkSandBox\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 2202.6688ms
[debug]     Load.loadUnit: defsScala took 0.0034ms
[debug] [Loading] Scanning directory C:\Users\alexe\IdeaProjects\SparkSandBox
[debug]       Load.loadUnit: mkEval took 0.2876ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\alexe\IdeaProjects\SparkSandBox, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.098 ms
[info] loading settings for project sparksandbox from build.sbt ...
[debug]         Load.resolveProject(sparksandbox) took 32.4442ms
[debug]       Load.loadTransitive: finalizeProject(Project(id sparksandbox, base: C:\Users\alexe\IdeaProjects\SparkSandBox, plugins: List(<none>))) took 35.6264ms
[debug] [Loading] Done in C:\Users\alexe\IdeaProjects\SparkSandBox, returning: (sparksandbox)
[debug]     Load.loadUnit: loadedProjectsRaw took 2888.7284ms
[debug]     Load.loadUnit: cleanEvalClasses took 11.0892ms
[debug]   Load.loadUnit(file:/C:/Users/alexe/IdeaProjects/SparkSandBox/, ...) took 5103.1529ms
[debug] Load.apply: load took 5104.6682ms
[debug] Load.apply: resolveProjects took 0.0841ms
[debug] Load.apply: finalTransforms took 21.8894ms
[debug] Load.apply: config.delegates took 0.4995ms
[debug] Load.apply: Def.make(settings)... took 60.5327ms
[debug] Load.apply: structureIndex took 21.0924ms
[debug] Load.apply: mkStreams took 0.0029ms
[info] set current project to SparkSandBox (in build file:/C:/Users/alexe/IdeaProjects/SparkSandBox/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51147 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51147, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SparkSandBox (in build file:/C:/Users/alexe/IdeaProjects/SparkSandBox/)
[debug] > Exec(idea-shell, None, None)
